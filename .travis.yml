sudo: required

services:
  - docker

language: java
jdk: oraclejdk8

env:
  global:
    # DOCKER_* vars
    - secure: "WsHx42lYXrRuG4/JIZ7JL++qEPGqltgDPD3J4GCK1yACxrTeiv2Rt2uRJHXV1RQA5IDEHc49T07Ys16Ti51BTemc3r9IwsDXAqaFQI3gdb15lsK3LydVsLOq0sB3brodKOOUitkn+Dst4ZiORHfRfuJg7Ws0hMGPgm39XA1pjf2z/BDfWvMjkNF2u+sADrKnQy4DyRaLfGA0gKsObq6mPO2rlK7yakcjHnIROPfxfkouXhGLp0UVMDeUhDqFohKs3LRsD5RnuJqYSYUS3mq5x4WjErGH6uhlVrtsmd636IatYlqx1Db8bu0rpTR1hlMXEaukeB5eauVk49p4E5nzsCXFgrWMchofPWMWPKVSOTYbB2x6TO74goi/UTRGa6AcB3cxYnqbyQRFrdMnJHXh9O0RKis0mux5WXTDvarhnoEyYJN57T+aMNMqyVsbwxkBpaASmJ8ucZ4NC4v7rJW+CgIMH+souYdJk1UMjBJWhso69XKn4nfybYwSqNtLUtebygsKBMx7bW/vA1Vl8G4o6Oaw4VIFTO9V1nBq5RpNw2D29W1BSMyVXCkVxCOaK9a0rEeGvZUUekhxTCvSf2p1/VbM87ZDpoNcR429B8DxvuhRUa/tW+o2JFQtDOyU6/oL75UzlIndiawZln0ijNFkYKBrdOPp0f8wV2pwuwrL1X4="
    - secure: "rvMamt5hU3ZpoeBiQPXrywjxCYZSpDQ7pkUS9vnT4DP7mUYxBB1CUXdd48xCZ5jmCkOqIOxiCAX2A0Y+mYSWcBieKQnrlwLJUcP6KUO6w9f37SG5aZYfNxEKoeXRsipRFv6BCvLXbSEnqsqQD4tiURskk4gjQSstRJdO0wYyWxaLcqlXUfeWZVSdd4TTNJZ0ySqjsIh/XRuHHFtPeQ1hBngfw55gq446C0hCq8RVyXgCilOIDzu1T+G8g3qUAZ67I71eecjHCNkx8DCAf7G4PtuWEW0gAcHd6t18UduGlee1bU0he6t+rDf/Go+shwo/fz20POgNp7nUJsvwAomru1BuqPQh9g0+eIYaJkUR6AecP/qMmiu16WVZ2jjMXmjbm1jS8YFtoKIgFbkmYYeLrYHTjpqc1yKzUo4J0NGXcJjTFUXsBQVTkI9xPamwVHGZUmWSrLThNz4+GGcjjcQyNHzjyOjAysEp/pd5Vb2F16ta7BPe4je6IRgM79bbshjrgjLudKzV7WtQxLLjLvd04NNidvoTEYjb/T9kzqa/UMv7LyzbHoJl7V2y8pC5/oH/pY4WhFYTasxWluqm+E7ujYSVI0DPfz+Otqu6iX0KhBbEDMfqMknrLwnBILPO0oZkZLlPOQr+IJy0e21CFyvZO6LyZeAlKnjqSOhIqMoAcX8="
    - secure: "E36y9sGm6yuTnuTdWYUMISX320bbNiVJir86/T9y2wGZ8KZLzSzOma29KgBKjlDrCKV9B8i1iMOP56Boyaj3YvBBhGrGnDuQWpUf6fwPZ/yMKx6Q7cVhKwk4n+LYTPaWZll9qdhsF6nyD+fWivw1xCA1ucFij6Gkj3quRq0qy7xxb4DShNJwPxQTMTWQikXA3T1ABB94wyMvUjqdSc0G8gmUOxc9HLYcHmH9iXOjhZDt/QBZAGv+20fuq1GgZOsptGXJPdga5BJdi/P3YlS1l8TbWy2wCvvYvDid5BnOXILKaJsAy7YSuQ9VYsPQhCHOqNyaW/0//wAsfEFb/D8sexAqQZv+52yGYDcOUUXQRzfvIWVWg7Bbeydb+ov+sjwiZDOlJLRTnWsHvEuVOE+f58h+RLfiDw2RU1anAwBPPdrQbNIMcC/AKHii9z9Z/JdLYxqLNA7XYN22q7qcLSBFooHnOspvXYTxnfwhQhyqvKDtbbT37isfr/b92SOSlvc2n4s5Oq4LG3ajCe1yBIVWPpZQwTQsBFis48GRItOgGLJAjZm2OjL5gIDzWPtTMhbnEilXNnHExd70WGCx1YMLxf4RsQjn/Z2l7HeyPfS0qH7GADFYhcoTOZiiYtV92qdom6Ab1H0lVlFJLb3vW0hsAE+cuwiRI+RtD/Cer/zLlAc="
    - COMMIT=${TRAVIS_COMMIT::7}

after_success:
#  - bash <(curl -s https://codecov.io/bash)
  - docker login -e="$DOCKER_EMAIL" -u="$DOCKER_USERNAME" -p="$DOCKER_PASSWORD";

  #TAG
  - export TAG=`if [ "$TRAVIS_BRANCH" == "master" ]; then echo "latest"; else echo $TRAVIS_BRANCH | sed "s,/,_," ; fi`

  # CONFIG SERVICE
  - export CONFIG=microservdemo/piggymetrics-config
  - docker build -t $CONFIG:$COMMIT ./config
  - docker tag $CONFIG:$COMMIT $CONFIG:$TAG
  - docker push $CONFIG

  # REGISTRY
  - export REGISTRY=microservdemo/piggymetrics-registry
  - docker build -t $REGISTRY:$COMMIT ./registry
  - docker tag $REGISTRY:$COMMIT $REGISTRY:$TAG
  - docker push $REGISTRY

  # GATEWAY
  - export GATEWAY=microservdemo/piggymetrics-gateway
  - docker build -t $GATEWAY:$COMMIT ./gateway
  - docker tag $GATEWAY:$COMMIT $GATEWAY:$TAG
  - docker push $GATEWAY

  # AUTH SERVICE
  - export AUTH_SERVICE=microservdemo/piggymetrics-auth-service
  - docker build -t $AUTH_SERVICE:$COMMIT ./auth-service
  - docker tag $AUTH_SERVICE:$COMMIT $AUTH_SERVICE:$TAG
  - docker push $AUTH_SERVICE

  # ACCOUNT SERVICE
  - export ACCOUNT_SERVICE=microservdemo/piggymetrics-account-service
  - docker build -t $ACCOUNT_SERVICE:$COMMIT ./account-service
  - docker tag $ACCOUNT_SERVICE:$COMMIT $ACCOUNT_SERVICE:$TAG
  - docker push $ACCOUNT_SERVICE

  # STATISTICS SERVICE
  - export STATISTICS_SERVICE=microservdemo/piggymetrics-statistics-service
  - docker build -t $STATISTICS_SERVICE:$COMMIT ./statistics-service
  - docker tag $STATISTICS_SERVICE:$COMMIT $STATISTICS_SERVICE:$TAG
  - docker push $STATISTICS_SERVICE

  # NOTIFICATION_SERVICE
  - export NOTIFICATION_SERVICE=microservdemo/piggymetrics-notification-service
  - docker build -t $NOTIFICATION_SERVICE:$COMMIT ./notification-service
  - docker tag $NOTIFICATION_SERVICE:$COMMIT $NOTIFICATION_SERVICE:$TAG
  - docker push $NOTIFICATION_SERVICE

  # MONITORING
  - export MONITORING=microservdemo/piggymetrics-monitoring
  - docker build -t $MONITORING:$COMMIT ./monitoring
  - docker tag $MONITORING:$COMMIT $MONITORING:$TAG
  - docker push $MONITORING

  # TURBINE STREAM SERVICE
  - export TURBINE=microservdemo/piggymetrics-turbine-stream-service
  - docker build -t $TURBINE:$COMMIT ./turbine-stream-service
  - docker tag $TURBINE:$COMMIT $TURBINE:$TAG
  - docker push $TURBINE

  # MONGO DB
  - export MONGO_DB=microservdemo/piggymetrics-mongodb
  - docker build -t $MONGO_DB:$COMMIT ./mongodb
  - docker tag $MONGO_DB:$COMMIT $MONGO_DB:$TAG
  - docker push $MONGO_DB

before_deploy:
  # decode kubernetes config
  - openssl aes-256-cbc -K $encrypted_3094b197f777_key -iv $encrypted_3094b197f777_iv -in kube-config-ibm-cloud-microserv-demo.yml.enc -out kube-config-ibm-cloud-microserv-demo.yml -d
  # install kubectl
  - |
    curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    chmod +x ./kubectl
    sudo mv ./kubectl /usr/local/bin/kubectl

deploy:
  skip_cleanup: true
  provider: script
  script: bash ./kubernetes_ibmcloud_deploy.sh
  on:
    branch: feat/k8s
